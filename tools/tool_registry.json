{
  "aggregate_file_content": {
    "description": "Combines multiple file contents from prior steps for summarization.",
    "import_path": "tools.aggregate_file_content.aggregate_file_content",
    "parameters": {
      "type": "object",
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of step references (e.g., ['<step_0>', '<step_1>'])"
        }
      },
      "required": [
        "steps"
      ]
    },
    "input_model": "AggregateFileContentInput",
    "output_model": "AggregateFileContentOutput"
  },
  "check_cuda": {
    "description": "Checks whether CUDA is available using PyTorch.",
    "import_path": "tools.check_cuda.check_cuda",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "input_model": "CheckCudaInput",
    "output_model": "CheckCudaOutput"
  },
  "echo_message": {
    "description": "Returns a message (for debugging or testing).",
    "import_path": "tools.echo_message.echo_message",
    "parameters": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Message to echo."
        }
      },
      "required": [
        "message"
      ]
    },
    "input_model": "EchoMessageInput",
    "output_model": "EchoMessageOutput"
  },
  "find_dir_size": {
    "description": "Counts the number of files and the total size (in bytes and MB) of all files in a directory (recursively).",
    "import_path": "tools.find_dir_size.find_dir_size",
    "parameters": {
      "type": "object",
      "properties": {
        "root": {
          "type": "string",
          "description": "Directory to scan (default is current directory)."
        }
      },
      "required": []
    },
    "input_model": "FindDirSizeInput",
    "output_model": "FindDirSizeOutput"
  },
  "find_dir_structure": {
    "description": "Returns a hierarchical directory tree (files + folders) for a given path.",
    "import_path": "tools.find_dir_structure.find_dir_structure",
    "parameters": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Path to scan for directory structure."
        }
      },
      "required": []
    },
    "input_model": "FindDirStructureInput",
    "output_model": "FindDirStructureOutput"
  },
  "find_file_by_keyword": {
    "description": "Finds files by keyword in their name or content.",
    "import_path": "tools.find_file_by_keyword.find_file_by_keyword",
    "parameters": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "string",
          "description": "Keyword to search for."
        },
        "root": {
          "type": "string",
          "description": "Directory to start search (default is current directory)."
        }
      },
      "required": [
        "keyword"
      ]
    },
    "input_model": "FindFileByKeywordInput",
    "output_model": "FindFileByKeywordOutput"
  },
  "list_project_files": {
    "description": "Lists all files in a directory with optional include/exclude filters for extensions.",
    "import_path": "tools.list_project_files.list_project_files",
    "parameters": {
      "type": "object",
      "properties": {
        "root": {
          "type": "string",
          "description": "Directory to list files from (default is current directory)."
        },
        "include": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of file extensions to include (e.g., ['.py', '.txt'])."
        },
        "exclude": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of file extensions or directory names to exclude (e.g., ['.pyc', '__pycache__'])."
        }
      },
      "required": []
    },
    "input_model": "ListProjectFilesInput",
    "output_model": "ListProjectFilesOutput"
  },
  "llm_response_async": {
    "description": "Calls the LLM directly with a prompt and returns the response as text.",
    "import_path": "tools.llm_response_async.run",
    "parameters": {
      "type": "object",
      "properties": {
        "prompt": {
          "type": "string",
          "description": "The prompt to send to the LLM."
        }
      },
      "required": [
        "prompt"
      ]
    },
    "input_model": "LLMResponseInput",
    "output_model": "LLMResponseOutput"
  },
  "locate_file": {
    "description": "Locates a file by name in a directory.",
    "import_path": "tools.locate_file.locate_file",
    "parameters": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "description": "Name of the file to locate."
        },
        "root": {
          "type": "string",
          "description": "Directory to start search (default is current directory)."
        }
      },
      "required": [
        "filename"
      ]
    },
    "input_model": "LocateFileInput",
    "output_model": "LocateFileOutput"
  },
  "make_virtualenv": {
    "description": "Creates a virtual environment in the specified directory.",
    "import_path": "tools.make_virtualenv.make_virtualenv",
    "parameters": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Directory where the virtual environment should be created."
        }
      },
      "required": [
        "path"
      ]
    },
    "input_model": "MakeVirtualenvInput",
    "output_model": "MakeVirtualenvOutput"
  },
  "read_files": {
    "description": "Reads the contents of one or more files.",
    "import_path": "tools.read_files.read_files",
    "parameters": {
      "type": "object",
      "properties": {
        "path": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of file paths to read."
        }
      },
      "required": [
        "path"
      ]
    },
    "input_model": "ReadFilesInput",
    "output_model": "ReadFilesOutput"
  },
  "retrieval_tool": {
    "description": "Searches for files or content using a keyword related to secret (e.g. GitHub token, Hugging Face password).",
    "import_path": "tools.retrieval_tool.retrieval_tool",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Keyword related to secret (e.g. GitHub token, Hugging Face password)."
        }
      },
      "required": [
        "query"
      ]
    },
    "input_model": "RetrievalToolInput",
    "output_model": "RetrievalToolOutput"
  },
  "seed_parser": {
    "description": "Parses plaintext files into key-value pairs.",
    "import_path": "tools.seed_parser.seed_parser",
    "parameters": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to config or password file."
        }
      },
      "required": [
        "file"
      ]
    },
    "input_model": "SeedParserInput",
    "output_model": "SeedParserOutput"
  },
  "set_scope": {
    "description": "Sets project root and optional branch subpaths (relative to root) for subsequent tools.",
    "import_path": "tools.set_scope.set_scope",
    "parameters": {
      "type": "object",
      "properties": {
        "root": { "type": "string", "description": "Project root directory." },
        "branches": {
          "type": "array",
          "items": { "type": "string" },
          "description": "One or more subpaths under root to operate on."
        }
      },
      "required": []
    },
    "input_model": "SetScopeInput",
    "output_model": "SetScopeOutput"
  },
  "summarize_config": {
    "description": "Summarizes known config files (.env, config.yaml, etc.) and lists important keys.",
    "import_path": "tools.summarize_config.summarize_config",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "input_model": "SummarizeConfigInput",
    "output_model": "SummarizeConfigOutput"
  },
  "summarize_files": {
    "description": "Summarizes a list of config files for keys and possible secrets.",
    "import_path": "tools.summarize_files.summarize_files",
    "parameters": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of file paths to summarize."
        }
      },
      "required": [
        "files"
      ]
    },
    "input_model": "SummarizeFilesInput",
    "output_model": "SummarizeFilesOutput"
  }
}
