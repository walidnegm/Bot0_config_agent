{
  "aggregate_file_content": {
    "name": "aggregate_file_content",
    "description": "Combines multiple file contents from prior steps for summarization.",
    "import_path": "tools.aggregate_file_content.aggregate_file_content",
    "parameters": {
      "type": "object",
      "properties": {
        "steps": {
          "type": "array",
          "items": { "type": "string" },
          "description": "List of step references (e.g., ['<step_0>', '<step_1>'])"
        }
      },
      "required": ["steps"]
    },
    "input_model": "AggregateFileContentInput",
    "output_model": "AggregateFileContentResult"
  },
  "check_cuda": {
    "name": "check_cuda",
    "description": "Checks whether CUDA is available using PyTorch.",
    "import_path": "tools.check_cuda.check_cuda",
    "parameters": { "type": "object", "properties": {}, "required": [] },
    "input_model": "CheckCudaInput",
    "output_model": "CheckCudaResult"
  },
  "echo_message": {
    "name": "echo_message",
    "description": "Returns a message (for debugging or testing).",
    "import_path": "tools.echo_message.echo_message",
    "parameters": {
      "type": "object",
      "properties": {
        "message": { "type": "string", "description": "Message to echo." }
      },
      "required": ["message"]
    },
    "input_model": "EchoMessageInput",
    "output_model": "EchoMessageResult"
  },
  "find_dir_size": {
    "name": "find_dir_size",
    "description": "Counts the number of files and the total size (in bytes and MB) of all files in a directory (recursively).",
    "import_path": "tools.find_dir_size.find_dir_size",
    "parameters": {
      "type": "object",
      "properties": {
        "dir": { "type": "string", "description": "Directory to scan (default is current directory)." }
      },
      "required": []
    },
    "input_model": "FindDirSizeInput",
    "output_model": "FindDirSizeResult"
  },
  "find_dir_structure": {
    "name": "find_dir_structure",
    "description": "Recursively returns the directory structure starting from a root path.",
    "import_path": "tools.find_dir_structure.find_dir_structure",
    "parameters": {
      "type": "object",
      "properties": {
        "dir": { "type": "string", "description": "Root directory to scan (absolute or relative)." },
        "ignore_dirs": {
          "type": "array",
          "description": "Directory names to skip anywhere in the tree.",
          "items": { "type": "string" }
        }
      },
      "required": ["dir"],
      "additionalProperties": false
    },
    "input_model": "FindDirStructureInput",
    "output_model": "FindDirStructureResult"
  },
  "find_files_by_keywords": {
    "name": "find_files_by_keywords",
    "description": "Searches for files containing the keyword in their name under the given directory.",
    "import_path": "tools.find_files_by_keywords.find_files_by_keywords",
    "parameters": {
      "type": "object",
      "properties": {
        "keywords": {
          "type": "array",
          "items": { "type": "string" },
          "description": "List of partial names to match (e.g., ['llama', 'model'])."
        },
        "dir": { "type": "string", "description": "Directory to search from. Defaults to current working directory." }
      },
      "required": ["keywords"]
    },
    "input_model": "FindFilesByKeywordsInput",
    "output_model": "FindFilesByKeywordsResult"
  },
  "list_project_files": {
    "name": "list_project_files",
    "description": "Recursively scans a project directory for files, supporting directory exclusion and file type inclusion filters. Returns files as a list of string paths.",
    "import_path": "tools.list_project_files.list_project_files",
    "parameters": {
      "type": "object",
      "properties": {
        "dir": { "type": "string", "description": "The root directory to scan. Defaults to the project root if not provided." },
        "exclude": {
          "type": "array",
          "items": { "type": "string" },
          "description": "List of directory names or substrings to exclude (e.g., ['venv', '.venv', '__pycache__', 'models'])."
        },
        "include": {
          "type": "array",
          "items": { "type": "string" },
          "description": "List of file extensions to include (e.g., ['.py', '.md', '.toml', '.yaml', '.json'])."
        }
      },
      "required": []
    },
    "input_model": "ListProjectFilesInput",
    "output_model": "ListProjectFilesResult"
  },
  "llm_response_async": {
    "name": "llm_response_async",
    "description": "Sends a prompt to the LLM and returns the generated natural language response.",
    "import_path": "tools.llm_response_async.llm_response_async",
    "parameters": {
      "type": "object",
      "properties": {
        "prompt": { "type": "string", "description": "Instruction or context to send to the LLM." }
      },
      "required": ["prompt"]
    },
    "input_model": "LLMResponseAsyncInput",
    "output_model": "LLMResponseAsyncResult"
  },
  "locate_file": {
    "name": "locate_file",
    "description": "Searches common development directories (home, project root) for a file with the exact name provided.",
    "import_path": "tools.locate_file.locate_file",
    "parameters": {
      "type": "object",
      "properties": {
        "filename": { "type": "string", "description": "Exact name of the file to locate (e.g., 'model.pth', 'config.yaml')." }
      },
      "required": ["filename"]
    },
    "input_model": "LocateFileInput",
    "output_model": "LocateFileResult"
  },
  "make_virtualenv": {
    "name": "make_virtualenv",
    "description": "Creates a Python virtual environment at a path.",
    "import_path": "tools.make_virtualenv.make_virtualenv",
    "parameters": {
      "type": "object",
      "properties": {
        "dir": { "type": "string", "description": "Where to create the environment." }
      },
      "required": ["dir"]
    },
    "input_model": "MakeVirtualEnvInput",
    "output_model": "MakeVirtualEnvResult"
  },
  "read_files": {
    "name": "read_files",
    "description": "Reads the contents of one or more files and returns them as a list of file-content mappings.",
    "import_path": "tools.read_files.read_files",
    "parameters": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "description": "List of file paths to read",
          "items": { "type": "string" },
          "minItems": 1
        }
      },
      "required": ["files"]
    },
    "input_model": "ReadFilesInput",
    "output_model": "ReadFilesResult"
  },
  "retrieval_tool": {
    "name": "retrieval_tool",
    "description": "Searches environment variables, .env files, and project files for secrets based on query intent.",
    "import_path": "tools.retrieval_tool.retrieval_tool",
    "parameters": {
      "type": "object",
      "properties": {
        "query": { "type": "string", "description": "Intent or keyword related to secret." }
      },
      "required": ["query"]
    },
    "input_model": "RetrievalToolInput",
    "output_model": "RetrievalToolResult"
  },
  "seed_parser": {
    "name": "seed_parser",
    "description": "Parses plaintext files into key-value pairs.",
    "import_path": "tools.seed_parser.seed_parser",
    "parameters": {
      "type": "object",
      "properties": {
        "file": { "type": "string", "description": "Path to config or password file." }
      },
      "required": ["file"]
    },
    "input_model": "SeedParserInput",
    "output_model": "SeedParserResult"
  },
  "set_scope": {
    "name": "set_scope",
    "description": "Sets project root and optional branch subpaths (relative to root) for subsequent tools.",
    "import_path": "tools.set_scope.set_scope",
    "parameters": {
      "type": "object",
      "properties": {
        "dir": { "type": "string", "description": "Project root directory." },
        "branches": {
          "type": "array",
          "items": { "type": "string" },
          "description": "One or more subpaths under root to operate on."
        }
      },
      "required": []
    },
    "input_model": "SetScopeInput",
    "output_model": "SetScopeResult"
  },
  "summarize_config": {
    "name": "summarize_config",
    "description": "Summarizes known config files (.env, config.yaml, etc.) and lists important keys.",
    "import_path": "tools.summarize_config.summarize_config",
    "parameters": { "type": "object", "properties": {}, "required": [] },
    "input_model": "SummarizeConfigInput",
    "output_model": "SummarizeConfigResult"
  },
  "summarize_files": {
    "name": "summarize_files",
    "description": "Summarizes a list of config files for keys and possible secrets.",
    "import_path": "tools.summarize_files.summarize_files",
    "parameters": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": { "type": "string" },
          "description": "List of file paths to summarize."
        }
      },
      "required": ["files"]
    },
    "input_model": "SummarizeFilesInput",
    "output_model": "SummarizeFilesResult"
  }
}
