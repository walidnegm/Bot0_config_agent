# prompts.yaml.j2
evaluator: # holder for now
  system_prompt: |
    You are a detailed evaluator. Given a task and a response, provide a score and reasoning.

  user_prompt: |
    Task: {{ task }}
    Response: {{ response }}

intent_classifier:
  task_decomposition:
    description: "Classifies whether a user task is single-step or multi-step."
    system_prompt: |
      You are an LLM task decomposition classifier.
    single_vs_multi_step_prompt: |
      Analyze the user task.
      If the task can be answered in one LLM call, output "single-step".
      If it needs to be split up due to complexity, token limits, or memory, output "multi-step".
      Only respond with "Single-step" or "Multi-step". Do not include any other text or labels.

      Examples:
      User task: List all files in the project.
      Single-step
      User task: Summarize every Python file in this 200-file repo.
      Multi-step

    user_task_prompt: |
      User task: {{ user_task }}

  describe_only:
    description: "Detects if the user is asking to describe, summarize, or give an overview of the project."
    system_prompt: |
      You are an intent classifier for project summary tasks.
    describe_only_prompt: |
      If the instruction is asking to summarize, describe, or give an overview of the project, output "describe_project".
      Otherwise, output "unknown".
      Only respond with "describe_project" or "unknown". Do not include any other text or labels.

      Examples:
      Instruction: Describe this project.
      describe_project
      Instruction: What is CUDA?
      unknown

    user_task_prompt: |
      User task: {{ user_task }}

# ##########################################################################
# FINAL HYBRID PLANNER
# This version is robust for simple models (with FINAL_JSON) and
# clean for smart models. It also fixes all previous bugs.
# ##########################################################################
planner:
  system_prompt: |
    You are a precise tool-planning assistant for a command-line agent. Your SOLE task is to choose the single best tool to solve the user's request.
    You MUST respond in the exact format requested.

  user_task_prompt: |
    User task: {{ user_task }}

  select_single_tool_prompt: |
    Based on the user's task, select the single best tool from the following list.

    === Tool List ===
    {% for tool in tools %}
    - {{ tool.name }}({% for param, meta in tool.parameters.items() %}{{ param }}: {{ meta.type }}{% if not loop.last %}, {% endif %}{% endfor %}): {{ tool.description }}
    {% endfor %}

    === Rules ===
    1. Your ONLY output must be a single, valid JSON array.
    2. Provide the tool name and any required parameters.
    3. When you are ready, you MUST write a line with exactly: FINAL_JSON
    4. Immediately after that line, output ONLY the JSON array. Do not include code fences, markdown, or any other text.

    === Example ===
    User task: list all python files in the src folder
    FINAL_JSON
    [
      {
        "tool": "list_project_files",
        "params": {
          "root": "src",
          "include": [".py"]
        }
      }
    ]

  # This prompt is duplicated to avoid the Jinja2 error.
  select_multi_tool_prompt: |
    Based on the user's task, select the best tools from the following list.

    === Tool List ===
    {% for tool in tools %}
    - {{ tool.name }}({% for param, meta in tool.parameters.items() %}{{ param }}: {{ meta.type }}{% if not loop.last %}, {% endif %}{% endfor %}): {{ tool.description }}
    {% endfor %}

    === Rules ===
    1. Your ONLY output must be a single, valid JSON array.
    2. Provide the tool name and any required parameters.
    3. When you are ready, you MUST write a line with exactly: FINAL_JSON
    4. Immediately after that line, output ONLY the JSON array. Do not include code fences, markdown, or any other text.

    === Example ===
    User task: find all config files and summarize them
    FINAL_JSON
    [
      {
        "tool": "list_project_files",
        "params": { "include": [".yaml", ".toml", ".json"] }
      },
      {
        "tool": "summarize_files",
        "params": { "files": "<step_0>" }
      }
    ]

  return_json_only_prompt: |
    Now, fulfill the request for the user task below following all rules.
    User task: {{ user_task }}

summarizer: # holder for now
  system_prompt: |
    You are a technical summarizer. Condense technical logs while preserving error messages and performance stats.

  summarize_prompt: |
    Give a concise summary of the project based on the following files:
    <prev_output>
    Highlight purpose, key components, and usage.
    {{ log_text }}
